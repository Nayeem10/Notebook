struct Query { int l, r, idx; bool operator<(const Query &other) const { if (l / BLOCK != other.l / BLOCK) { return l / BLOCK < other.l / BLOCK; } return r < other.r; } }; vector<bool> mo_algorithm(vector<Query> &queries, int n, int q) { sort(queries.begin(), queries.end()); int currl = 0, curr_r = -1; vector<bool> result(q); for (auto &query : queries) { int l = query.l, r = query.r, idx = query.idx; while (curr_r < r) { add(++curr_r); } while (curr_r > r) { remove(curr_r--); } while (currl < l) { remove(currl++); } while (currl > l) { add(--currl); } } return result; }